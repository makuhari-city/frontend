{"version":3,"sources":["TitleBar.tsx","MakeNewUser.tsx","user.tsx","database.tsx","ListView.tsx","VotingForms.tsx","vote.tsx","VotingResults.tsx","VotingInfo.tsx","VotingSession.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TitleBar","className","href","MakeNewUser","useState","newUser","setNewUser","nameInput","setNameInput","isUserSaved","setIsUserSaved","color","setColor","addUser","name","user","uid","uuidv4","createUser","localStorage","setItem","JSON","stringify","saveUser","substring","console","error","type","placeholder","value","onKeyUp","event","key","onChange","e","target","onClick","style","baseUrl","prefix","fetchList","a","fetch","res","json","list","fetchHeader","id","header","fetchTopicData","info","fetchResult","hash","updateVote","topic_id","vote","newVote","method","body","headers","log","ListView","setList","isLoading","setIsLoading","isEmpty","setIsEmpty","useEffect","newList","length","getList","items","map","item","title","VotingForms","initialVotes","votes","setVotes","handleChange","uuid","parseFloat","newVotes","handleIncrementValueButton","inc","newvalue","newvotes","Object","keys","k","delegates","includes","policies","update","topicData","response","data","VotingResults","result","setResult","fetched","status","latest","calculated","checkResult","undefined","borda","borda_order","liquid","fptp","renderResult","VotingInfo","description","open","options","forEach","to","userVotes","getOptions","VotingSession","setInfo","setHash","latestInfo","getInfo","checkParams","p","cUrl","window","location","search","URLSearchParams","get","App","setUser","savedUser","userData","getItem","parse","checkSavedUser","topicId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.66758656.chunk.js","sourcesContent":["const TitleBar = () => (\n  <header>\n    <nav className=\"flex items-center justify-between p-6 container mx-auto mt-32 mb-32 max-w-screen-lg font-bold\">\n      <a href=\"/\" className=\"hover:underline\">\n\t\t  METACITY<br/>\n\t\t\t「多層都市」幕張市\n      </a>\n    </nav>\n  </header>\n);\n\nexport default TitleBar;\n","import { useState } from \"react\";\nimport { createUser, saveUser, User } from \"./user\";\nimport TitleBar from \"./TitleBar\";\n// import Canvas from \"./Canvas\";\n\nconst MakeNewUser = () => {\n  const [newUser, setNewUser] = useState<undefined | User>();\n  const [nameInput, setNameInput] = useState(\"\");\n  const [isUserSaved, setIsUserSaved] = useState(false);\n  const [color, setColor] = useState(\"#eceff4\");\n\n  const handleKey = (event: { key: string }) => {\n    if (event.key === \"Enter\") {\n      addUser(nameInput);\n    }\n  };\n\n  const addUser = (name: string) => {\n    if (name !== \"\") {\n      const user = createUser(name);\n      saveUser(user); // saves this to local storage\n\t  setNewUser(user);\n      setIsUserSaved(true);\n\t  setColor(`#${user.uid.substring(0,5)}`);\n\t  setNameInput(\"\");\n    } else {\n      console.error(\"username is empty\");\n    }\n  };\n\n  const handleChange = (value: string) => {\n    setNameInput(value);\n  };\n\n  return (\n    <>\n      <TitleBar />\n      <div className=\"container mx-auto px-6 py-16 max-w-screen-lg bg-nord-0 bg-opacity-90 rounded\">\n        <div className=\"font-bold mb-3\">Citizen Registration 住民登録</div>\n\t\t  <div className=\"font-thin text-xs mb-8\">幕張市プロジェクト参加には住民登録が必要です。</div>\n\n        <div className=\"grid grid-cols-2 w-3/5 justify-items-end\">\n\t\t\t<div className=\"self-center\">username:</div>\n          <div>\n            <input\n              type=\"text\"\n              placeholder=\"johndoe\"\n              name=\"name\"\n\t\t\t\tvalue={nameInput}\n              className=\"px-6 py-3 placeholder-gray-400 text-nord-0 relative bg-nord-4 rounded text-sm border border-nord-1 outline-none focus:outline-none focus:ring\"\n              onKeyUp={handleKey}\n              onChange={(e) => handleChange(e.target.value)}\n            />\n          </div>\n        </div>\n\n        <div className=\"w-3/5 grid justify-items-end mt-16\">\n          <button\n            onClick={() => {\n              addUser(nameInput);\n            }}\n            className=\"transition duration-150 ease-in bg-nord-1 hover:bg-nord-2 text-nord-4 border border-nord-5 font-bold py-2 px-6 rounded\"\n          >\n            register\n          </button>\n        </div>\n\n        {isUserSaved && (\n          <div className=\"w-3/5 grid grid-justify-items-end\">\n\t\t\t<div className=\"text-nord-9 my-4\">\n\t\t\t\t'{newUser!.name}' created with id <span style={{color:`${{color}}`}}>{newUser!.uid.substring(0,6)}</span>\n\t\t\t</div>\n            <a href=\"./\" className=\"ease-in duration-150 bg-nord-1 hover:bg-nord-2 text-nord-4 font-bold py-2 px-6 rounded text-center\" >go to list</a>\n          </div>\n        )}\n      </div>\n\t\t{/*<Canvas />*/}\n    </>\n  );\n};\n\nexport default MakeNewUser;\n","import { v4 as uuidv4 } from \"uuid\";\n\nexport interface User {\n  name: string;\n  uid: string;\n}\n\nexport const createUser = (name: string): User => {\n  return { uid: uuidv4(), name } as User;\n};\n\nexport const saveUser = (user: User) => {\n  localStorage.setItem(\"user\", JSON.stringify(user));\n};\n\nexport const checkSavedUser = (): null | User => {\n  const userData = localStorage.getItem(\"user\");\n  if (userData) {\n    const user: User = JSON.parse(userData);\n    return user;\n  } else {\n    return null;\n  }\n};\n\n\n","const baseUrl = \"https://vote.metacity.jp\";\nconst prefix = \"db\";\n\nexport interface ITopicHeader {\n  id: string;\n  hash: string;\n  title: string;\n}\n\nexport interface ITopicData {\n  id: string;\n  title: string;\n  description: string;\n  delegates: { [id: string]: string };\n  policies: { [id: string]: string };\n  votes: { [src: string]: { [dest: string]: number } };\n}\n\nexport const fetchList = async (): Promise<ITopicHeader[]> => {\n  const res = await fetch(`${baseUrl}/${prefix}/list/`);\n  const list: ITopicHeader[] = await res.json();\n  return list;\n};\n\nexport const fetchHeader = async (id: string): Promise<ITopicHeader> => {\n  const res = await fetch(`${baseUrl}/${prefix}/header/${id}`);\n  const header: ITopicHeader = await res.json();\n  return header;\n};\n\nexport const fetchTopicData = async (id: string): Promise<ITopicData> => {\n  const res = await fetch(`${baseUrl}/${prefix}/topic/${id}/`);\n  const info: any = await res.json();\n  return info as ITopicData;\n};\n\nexport const fetchResult = async (hash: string): Promise<any | null> => {\n  const res = await fetch(`${baseUrl}/${prefix}/result/${hash}/`);\n  const info: any = await res.json();\n  if (!info) {\n    return null;\n  } else {\n    return info;\n  }\n};\n\nexport const postResult = async (hash: string, result: any) => {\n  const res = await fetch(`${baseUrl}/${prefix}/result/${hash}/`, {\n    method: \"POST\",\n    body: JSON.stringify(result),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n\n  let info = await res.json();\n  console.log(info);\n};\n\nexport const updateVote = async (\n  topic_id: string,\n  id: string,\n  name: string,\n  vote: { [to: string]: number }\n) => {\n  const newVote = {\n    id,\n    name,\n    vote,\n  };\n\n  const res = await fetch(\n    `${baseUrl}/${prefix}/topic/update/${topic_id}/delegate/`,\n    {\n      method: \"POST\",\n      body: JSON.stringify(newVote),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    }\n  );\n  const info: any = await res.json();\n  console.log(info);\n};\n","import { User } from \"./user\";\nimport { ITopicHeader, fetchList } from \"./database\";\nimport { useEffect, useState } from \"react\";\nimport TitleBar from \"./TitleBar\";\n// import Canvas from \"./Canvas\";\n\ninterface ListViewProps {\n  user: User;\n}\n\nconst ListView = ({ user }: ListViewProps) => {\n  const [list, setList] = useState<ITopicHeader[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isEmpty, setIsEmpty] = useState(true);\n\n  useEffect(() => {\n    const getList = async () => {\n      const newList = await fetchList();\n\t  setIsLoading(false);\n      if (newList.length > 0) {\n        setIsEmpty(false);\n        setList(newList);\n      }\n    };\n    getList();\n  }, []);\n\n  const renderList = (items: ITopicHeader[]) => (\n      <div>\n        <h1 className=\"px-4 text-bold\">topics:</h1>\n        <ul className=\"p-4 w-3/5\">\n          {items.map((item) => (\n            <li className=\"mb-1\">\n              <a\n                className=\"duration-500 ease-out p-4 flex space-x-4 bg-nord-1 hover:bg-nord-2\"\n                href={`?t=${item.id}`}\n              >\n                {item.title}\n              </a>\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n\n  return (\n    <>\n      <TitleBar />\n      <div className=\"container max-w-screen-lg py-8 mx-auto bg-nord-0 bg-opacity-90 min-h-1/4 rounded\">\n\t\t  {isLoading ? (\n\t\t\t  <div className=\"p-4\">Loading topics...</div>\n\t\t  ) : (isEmpty ? (\n          <div className=\"p-4\">0 topics. Nothing to vote.</div>\n        ) : (\n          renderList(list)\n        ))}\n        \n      </div>\n\t\t{/*<Canvas />*/}\n    </>\n  );\n};\n\nexport default ListView;\n","import { User } from \"./user\";\nimport { updateVote, ITopicData } from \"./database\";\nimport { useState } from \"react\";\n\ninterface VotingFormsProps {\n  info: ITopicData;\n  initialVotes: { [to: string]: number };\n  user: User;\n  id: string;\n}\n\nconst VotingForms = ({ info, initialVotes, user, id }: VotingFormsProps) => {\n  const [votes, setVotes] = useState(initialVotes);\n\n  const getString = (uuid: string): string => {\n    return Object.keys(info.delegates).includes(uuid)\n      ? info.delegates[uuid]\n      : info.policies[uuid];\n  };\n\n  const handleChange = (uuid: string) => {\n    const handeChangeUuid = (e: React.ChangeEvent<HTMLInputElement>) => {\n      let value = parseFloat(e.target.value);\n\n      if (!value) {\n        value = 0.0;\n      }\n\n      if (value < 1) {\n        value = 0.0;\n      }\n\n      let newVotes = { ...votes, [uuid]: value };\n      setVotes(newVotes);\n    };\n\n    return handeChangeUuid;\n  };\n\n  const handleIncrementValueButton = (uuid: string, inc: boolean) => {\n    const handleIncrement = () => {\n      const value = inc ? 1 : -1;\n\n      let newvalue = votes[uuid] + value;\n\n      if (newvalue < 0) {\n        newvalue = 0;\n      }\n\n      let newvotes = { ...votes, [uuid]: newvalue };\n      setVotes(newvotes);\n    };\n\n    return handleIncrement;\n  };\n\n  const renderOptions = () => {\n    return Object.keys(votes).map((k) => (\n      <div className=\"ml-3 mb-3 p-2 flex flex-row bg-nord-0 bg-opacity-50 rounded\">\n        <div className=\"flex items-center justify-center font-medium\">\n          {getString(k)}\n        </div>\n        <div className=\"flex-grow\"></div>\n        <div className=\"inline-flex\">\n          <button\n            className=\"font-bold px-3 bg-nord-1 hover:bg-nord-3 rounded-l\"\n            onClick={handleIncrementValueButton(k, false)}\n          >\n            -\n          </button>\n          <input\n            className=\"px-3 py-1 w-12 text-nord-0 bg-nord-4 font-medium\"\n            onChange={handleChange(k)}\n            value={votes[k]}\n          />\n          <button\n            className=\"font-bold px-3 bg-nord-1 hover:bg-nord-3 rounded-r\"\n            onClick={handleIncrementValueButton(k, true)}\n          >\n            +\n          </button>\n          {/*\n          <button className=\"rounded px-3 ml-3 bg-nord-11 bg-opacity-70 hover:bg-opacity-90\">\n            x\n\t\t  </button>*/}\n        </div>\n      </div>\n    ));\n  };\n\n  const handleSubmit = () => {\n    const update = async () => updateVote(id, user.uid, user.name, votes);\n    update();\n  };\n\n  return (\n    <div className=\"container mx-auto max-w-screen-lg p-3\">\n      <div className=\"w-3/5\">{renderOptions()}</div>\n      {/*\n      <div className=\"w-3/5 grid justify-items-end\">\n\t\t  <button className=\"p-2 rounded bg-nord-0 hover:bg-nord-2\">\n          Add New Option\n\t\t  </button>\n\t\t  </div>*/}\n      <div className=\"mt-3 w-3/5 grid justify-items-end\">\n        <button\n          className=\"p-2 rounded border bg-nord-9 font-bold text-nord-0 hover:bg-nord-10 bg-opacity-80 duration-500 ease-in\"\n          onClick={handleSubmit}\n        >\n          Update vote\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default VotingForms;\n","import {ITopicData} from \"./database\";\n\nexport const baseUrl = \"https://vote.metacity.jp\";\n\nexport const vote = async (topicData: ITopicData) => {\n\n  const response = await fetch(`${baseUrl}/rpc/`, {\n    // mode: \"cors\",\n    method: \"POST\",\n    body: JSON.stringify(topicData),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n  const data: {[method: string]: any} = await response.json();\n\n  return data;\n};\n","import { useEffect, useState } from \"react\";\nimport { vote } from \"./vote\";\nimport {\n  ITopicData,\n  fetchResult,\n  postResult,\n  fetchHeader,\n  fetchTopicData,\n} from \"./database\";\n\ninterface VotingResultsProps {\n  info: ITopicData;\n  hash: string;\n}\n\ninterface IResult {\n  borda: [string, number][];\n  liquid: [{ [what: string]: number }, { [who: string]: number }];\n  fptp: [string, number][];\n}\n\nconst VotingResults = ({ info, hash }: VotingResultsProps) => {\n\tlet [result, setResult] = useState<IResult | null | string>(null);\n  useEffect(() => {\n    const checkResult = async () => {\n      // get the latest header;\n      let header = await fetchHeader(info.id);\n\n      const fetched = await fetchResult(header.hash);\n\n      if (fetched.status === \"error\") {\n        setResult(\n          \"result not found in database. sending calculation result to `vote`.\"\n        );\n\n        let latest = await fetchTopicData(header.id);\n\n        let calculated = await vote(latest);\n\n        setResult(JSON.stringify(calculated, null, 2));\n      } else {\n        setResult(JSON.stringify(fetched, null, 2));\n      }\n    };\n\n    checkResult();\n  }, [hash, info]);\n\n  const renderResult = (result: IResult, info: ITopicData) => {\n\t  if(!result || result.borda === undefined) return;\n\n    const borda_order = result.borda\n      .map((item) => info.policies[item[0]])\n      .map((e) => <li>e</li>);\n    const liquid_policies = Object.keys(result.liquid[0]).map((e) => [\n      info.policies[e],\n      result.liquid[0][e],\n    ]);\n    const liquid_influence = Object.keys(result.liquid[1]).map((e) => [\n      info.delegates[e],\n      result.liquid[1][e],\n    ]);\n    const fptp = result.fptp\n      .map((item) => info.policies[item[0]])\n      .map((e) => <li>e</li>);\n\n    return (\n      <>\n        <p>borda</p>\n        <ol>{borda_order}</ol>\n      </>\n    );\n  };\n\n  return (\n    <>\n      <details className=\"text-sm p-2 mt-4\">\n        <summary className=\"p-3 bg-nord-0 bg-opacity-10 border border-nord-3 rounded w-3/5\">\n          Results\n        </summary>\n\t\t  {renderResult(result as IResult, info)}\n        <pre className=\"bg-nord-0 bg-opacity-90 text-xs p-3 mt-3 rounded w-3/5\">\n          {result}\n        </pre>\n        <button className=\"mt-3 mb-8 p-2 rounded border bg-nord-9 font-bold text-nord-0 hover:bg-nord-10 bg-opacity-80 duration-500 ease-in\">\n          Update\n        </button>\n      </details>\n    </>\n  );\n};\n\nexport default VotingResults;\n","import { ITopicData } from \"./database\";\nimport { User } from \"./user\";\nimport VotingForms from \"./VotingForms\";\nimport VotingResults from \"./VotingResults\";\nimport TitleBar from \"./TitleBar\";\n// import Canvas from \"./Canvas\";\n\ninterface VotingInfoProp {\n  info: ITopicData;\n  user: User;\n  hash: string;\n}\n\nconst VotingInfo = ({ info, user, hash }: VotingInfoProp) => {\n  const getOptions = (): { [to: string]: number } => {\n    let options: { [to: string]: number } = {};\n\n    Object.keys(info.policies).forEach((to) => (options[to] = 0.0));\n    Object.keys(info.delegates).forEach((to) => (options[to] = 0.0));\n\n    // fill in the current value\n    const userVotes = info.votes[user.uid];\n    if (userVotes) {\n      Object.keys(userVotes).forEach((to) => (options[to] = userVotes[to]));\n    }\n\n\tdelete options[user.uid];\n\n    return options;\n  };\n\n  return (\n    <>\n      <TitleBar />\n      <div className=\"container max-w-screen-lg mx-auto\">\n        <h1 className=\"font-bold p-2\">{info.title}</h1>\n        <details className=\"text-sm p-2 mb-4\">\n          <summary className=\"p-3 bg-nord-0 bg-opacity-10 border border-nord-3 rounded w-3/5\">\n            Details\n          </summary>\n          <p className=\"bg-nord-0 bg-opacity-90 text-xs p-3 mt-3 rounded w-3/5\">\n            {info.description}\n          </p>\n        </details>\n        <details open className=\"p-2\">\n          <summary className=\"p-3 bg-nord-0 bg-opacity-10 border border-nord-3 rounded w-3/5 text-sm\">\n            Votes\n          </summary>\n\n          <VotingForms\n            info={info}\n            initialVotes={getOptions()}\n            user={user}\n            id={info.id}\n          />\n        </details>\n        <VotingResults info={info} hash={hash} />\n      </div>\n\t\t{/*<Canvas />*/}\n    </>\n  );\n};\n\nexport default VotingInfo;\n","import { useEffect, useState } from \"react\";\nimport VotingInfo from \"./VotingInfo\";\nimport { fetchTopicData, ITopicData, fetchHeader, ITopicHeader } from \"./database\";\nimport { User } from \"./user\";\nimport TitleBar from \"./TitleBar\";\n\ninterface VotingSessionProps {\n  id: string;\n  user: User;\n}\n\nconst VotingSession = ({ id, user }: VotingSessionProps) => {\n  const [info, setInfo] = useState<null | ITopicData>(null);\n  const [hash, setHash] = useState(\"\");\n  useEffect(() => {\n    const getInfo = async () => {\n      let latestInfo: ITopicData = await fetchTopicData(id);\n\t  let header: ITopicHeader = await fetchHeader(id);\n\t  setHash(header.hash);\n      setInfo(latestInfo);\n    };\n    getInfo();\n  }, [id]);\n\n  if (info) {\n    return <VotingInfo info={info} user={user} hash={hash}/>;\n  } else {\n    return (\n      <div>\n        <TitleBar/>\n        <div className=\"container mx-auto max-w-screen-lg p-2\">\n\t\t\tLoading Topic (#{id.substring(0,5)}) information...\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default VotingSession;\n","import { User, checkSavedUser } from \"./user\";\nimport MakeNewUser from \"./MakeNewUser\";\nimport \"./App.css\";\nimport ListView from \"./ListView\";\nimport VotingSession from \"./VotingSession\";\nimport { useEffect, useState } from \"react\";\n\nconst App = () => {\n  const [user, setUser] = useState<null | User>(null);\n\n  useEffect(() => {\n    let savedUser = checkSavedUser();\n    setUser(savedUser);\n  }, []);\n\n  // first make sure we have a user\n  if (!user) {\n    return <MakeNewUser />;\n  }\n\n  const topicId = checkParams(\"t\");\n\n  if (!topicId) {\n    return <ListView user={user} />;\n  }\n\n  return <VotingSession id={topicId} user={user} />;\n};\n\nconst checkParams = (p: string): string | null => {\n  let cUrl = window.location.search;\n  const params = new URLSearchParams(cUrl);\n  return params.get(p);\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}