{"version":3,"sources":["MakeNewUser.tsx","user.tsx","database.tsx","ListView.tsx","VotingForms.tsx","vote.tsx","VotingResults.tsx","VotingInfo.tsx","VotingSession.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MakeNewUser","useState","newName","setNewName","isUserSaved","setIsUserSaved","type","placeholder","name","onKeyUp","event","key","user","localStorage","setItem","JSON","stringify","saveUser","uid","uuidv4","onChange","e","value","target","href","baseUrl","prefix","fetchList","a","fetch","res","json","list","fetchTag","hash","fetchInfo","info","fetchResult","console","log","postResult","voteResult","method","body","headers","updateVote","votes","ListView","setList","useEffect","newList","getList","map","item","title","VotingForms","initialValues","Object","keys","v","to","onSubmit","values","filtered","filter","parseFloat","isNaN","formatted","forEach","window","location","reload","update","insert","remove","push","length","vote","index","className","htmlFor","component","onClick","params","voteObj","jsonrpc","id","mode","response","data","VotingResults","result","setResult","calculated","info_uid","info_hash","checkResult","VotingInfo","icon","description","parent","options","combined","voters","concat","flat","Array","from","Set","d","policiesDup","p","userVotes","getOptions","VotingSession","setInfo","setHash","latestHash","latestInfo","getInfo","checkParams","cUrl","search","URLSearchParams","get","checkSavedUser","userData","getItem","parse","App","setUser","savedUser","topicId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6207ccff.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport { createUser, saveUser } from \"./user\";\n\nconst MakeNewUser = () => {\n  const [newName, setNewName] = useState<string>(\"\");\n  const [isUserSaved, setIsUserSaved] = useState(false);\n\n  const handleKey = (event: { key: string }) => {\n    if (event.key === \"Enter\") {\n      if (newName !== \"\") {\n        const user = createUser(newName);\n        saveUser(user);\n        setIsUserSaved(true);\n      }\n    }\n  };\n\n  const handleChange = (value: string) => {\n    setNewName(value);\n  };\n\n  return (\n    <div>\n      Hello New User !\n      <input\n        type=\"text\"\n        placeholder=\"new Name\"\n        name=\"name\"\n        onKeyUp={handleKey}\n        onChange={(e) => handleChange(e.target.value)}\n      />\n      {isUserSaved && <a href=\"./\"> see list</a>}\n    </div>\n  );\n};\n\nexport default MakeNewUser;\n","import { v4 as uuidv4 } from \"uuid\";\n\nexport interface User {\n  name: string;\n  uid: string;\n}\n\nexport const getUser = (): User | null => {\n  const data = localStorage.getItem(\"user\");\n  if (data != null) {\n    return JSON.parse(data) as User;\n  }\n  return null;\n};\n\nexport const createUser = (name: string): User => {\n  return { uid: uuidv4(), name } as User;\n};\n\nexport const saveUser = (user: User) => {\n  localStorage.setItem(\"user\", JSON.stringify(user));\n};\n\n","const baseUrl = \"https://vote.metacity.jp\";\nconst prefix = \"db\";\n\nexport interface ITopicListItem {\n  uid: string;\n  hash: string;\n  title: string;\n}\n\nexport interface IVoteInfo {\n  uid: string;\n  title: string;\n  description: string;\n  parent?: string;\n  method: string;\n  params: IVoteParams;\n}\n\nexport interface IResultFrac {\n  result: { [to: string]: number };\n}\n\nexport interface IResultLiquid {\n  result: [{ [to: string]: number }, { [to: string]: number }];\n}\n\nexport interface IVoteResult {\n  info_uid: string;\n  info_hash: string;\n  data: IResultFrac | IResultLiquid;\n}\n\nexport interface IVoteParams {\n  is_quadratic?: boolean;\n  is_normalize?: boolean;\n  voters: { [from: string]: { [to: string]: number } };\n}\n\nexport const fetchList = async (): Promise<ITopicListItem[]> => {\n  const res = await fetch(`${baseUrl}/${prefix}/list/`);\n  const list: ITopicListItem[] = await res.json();\n  return list;\n};\n\nexport const fetchTag = async (uid: string): Promise<string> => {\n  const res = await fetch(`${baseUrl}/${prefix}/tag/${uid}/`);\n  const hash: string = await res.json();\n  return hash;\n};\n\nexport const fetchInfo = async (hash: string): Promise<IVoteInfo> => {\n  const res = await fetch(`${baseUrl}/${prefix}/info/${hash}/`);\n  const info: any = await res.json();\n  return info as IVoteInfo;\n};\n\nexport const fetchResult = async (\n  hash: string\n): Promise<IVoteResult | null> => {\n  const res = await fetch(`${baseUrl}/${prefix}/result/${hash}/`);\n  const info: IVoteResult | string = await res.json();\n  if (!info) {\n    console.log(\"hi\");\n    return null;\n  } else {\n    console.log(info);\n    if (info === \"result not found\") {\n      return null;\n    } else {\n      return info as IVoteResult;\n    }\n  }\n};\n\nexport const postResult = async (\n\tvoteResult :IVoteResult\n) => {\n\n\tconst res = await fetch(`${baseUrl}/${prefix}/result/`,{\n\t\tmethod:\"POST\",\n\t\tbody: JSON.stringify(voteResult),\n\t\theaders:{\n\t\t\t\"Content-Type\":\"application/json\"\n\t\t}\n\t});\n\n\tlet info = await res.json();\n\tconsole.log(info);\n}\n\nexport const updateVote = async (\n  uid: string,\n  name: string,\n  votes: { [to: string]: number }\n) => {\n  const res = await fetch(`${baseUrl}/${prefix}/info/${uid}/${name}/`, {\n    method: \"POST\",\n    body: JSON.stringify(votes),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n  const info: any = await res.json();\n  console.log(info);\n};\n","import { User } from \"./user\";\nimport { ITopicListItem, fetchList } from \"./database\";\nimport { useEffect, useState } from \"react\";\n\ninterface ListViewProps {\n\tuser:User\n}\n\nconst ListView = ({user}:ListViewProps) => {\n  const [list, setList] = useState<ITopicListItem[]>([]);\n\n  useEffect(() => {\n    const getList = async () => {\n      const newList = await fetchList();\n      setList(newList);\n    };\n    getList();\n  }, []);\n\n  return (\n    <div>\n\t\t<p>logged in as: {user.name}({user.uid})</p>\n      <ul>\n        {list.map((item) => {\n          return (\n            <li>\n              <a href={`?t=${item.uid}`}>{item.title}</a>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default ListView;\n","import { Formik, Field, Form, ErrorMessage, FieldArray } from \"formik\";\nimport { User } from \"./user\";\nimport {updateVote} from \"./database\";\n\ninterface VotingFormsProps {\n  votes: { [to: string]: number };\n  user: User;\n  uid: string;\n}\n\nconst VotingForms = ({ votes, user, uid }: VotingFormsProps) => {\n\n  const initialValues = {\n    votes: Object.keys(votes).map((v) => ({ to: v, value: votes[v] })),\n  };\n\n  const handleSubmit = (values: { votes: any[] }) => {\n    const filtered = values.votes\n      .filter((v) => v.to !== \"\")\n      .filter((v) => v.value !== 0.0)\n\t  .map(v=>({to:v.to, value:parseFloat(v.value)}))\n\t  .filter(v=>!isNaN(v.value));\n    let formatted: { [to: string]: number } = {};\n    filtered.forEach((v) => (formatted[v.to] = v.value));\n\tconst update = async ()=>{\n\t\tawait updateVote(uid, user.name, formatted);\n\t\twindow.location.reload(true);\n\t}\n\tupdate();\n\t// window.location.reload(true);\n  };\n\n  return (\n    <div>\n      <Formik initialValues={initialValues} onSubmit={handleSubmit}>\n        {({ values }) => (\n          <Form>\n            <FieldArray name=\"votes\">\n              {({ insert, remove, push }) => (\n                <div>\n                  {values.votes.length > 0 &&\n                    values.votes.map((vote, index) => (\n                      <div className=\"row\" key={index}>\n                        <div className=\"col\">\n                          <label htmlFor={`votes.${index}.to`}>To</label>\n                          <Field\n                            name={`votes.${index}.to`}\n                            placeholder=\"Option\"\n                            type=\"text\"\n                          />\n                          <ErrorMessage\n                            name={`votes.${index}.to`}\n                            component=\"div\"\n                            className=\"field-error\"\n                          />\n                        </div>\n                        <div className=\"col\">\n                          <label htmlFor={`votes.${index}.value`}>Value</label>\n                          <Field\n                            name={`votes.${index}.value`}\n                            placeholder=\"Option\"\n                            type=\"text\"\n                          />\n                          <ErrorMessage\n                            name={`votes.${index}.value`}\n                            component=\"div\"\n                            className=\"field-error\"\n                          />\n                        </div>\n                        <div className=\"col\">\n                          <button type=\"button\" onClick={() => remove(index)}>\n                            X\n                          </button>\n                        </div>\n                      </div>\n                    ))}\n                  <button\n                    type=\"button\"\n                    className=\"secondary\"\n                    onClick={() => push({ to: \"\", value: \"0.0\" })}\n                  >\n                    Add Option\n                  </button>\n                </div>\n              )}\n            </FieldArray>\n            <button type=\"submit\">update vote</button>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nexport default VotingForms;\n","export const baseUrl = \"https://vote.metacity.jp\";\n\nconst params: VoteParams = {\n  quadratic: true,\n  voters: {\n    minori: {\n      ray: 0.1,\n      yasushi: 0.9,\n    },\n    yasushi: {\n      minori: 0.4,\n      ray: 0.6,\n    },\n    ray: {\n      minori: 0.8,\n      yasushi: 0.2,\n    },\n  },\n};\n\nexport const testVote: VoteRPC = {\n  jsonrpc: \"2.0\",\n  id: \"1\",\n  method: \"frac\",\n  params,\n};\n\nexport const vote = async (params: VoteParams, method:string, hash:string) => {\n  const voteObj = {\n    jsonrpc: \"2.0\",\n    id: hash,\n    method,\n    params,\n  };\n\n  const response = await fetch(`${baseUrl}/rpc/`, {\n    mode: \"cors\",\n    method: \"POST\",\n    body: JSON.stringify(voteObj),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n  const data: VoteRPCResult = await response.json();\n\n  return data;\n\n  // if (data.error) {\n  //   return data.error;\n  // }\n\n  // return data.result;\n};\n\ninterface VoteRPC {\n  jsonrpc: string;\n  id: string;\n  method: string;\n  params: VoteParams;\n}\n\nexport interface VoteParams {\n  quadratic?: boolean;\n  normalize?: boolean;\n  voters: { [from: string]: { [to: string]: number } };\n}\n\nexport interface VoteRPCResult {\n  jsonrpc: string;\n  id: string;\n  result?: any;\n  error?: any;\n}\n","import { useEffect, useState } from \"react\";\nimport { vote, VoteRPCResult } from \"./vote\";\nimport { IVoteInfo, fetchResult, IVoteResult, postResult } from \"./database\";\n\ninterface VotingResultsProps {\n  info: IVoteInfo;\n  hash: string;\n}\n\nconst VotingResults = ({ info, hash }: VotingResultsProps) => {\n  // let [result, setResult] = useState<null|IVoteResult>(null);\n  let [result, setResult] = useState(\"\");\n  // is the result calculated?\n  useEffect(() => {\n    const checkResult = async () => {\n      let res = await fetchResult(hash);\n      if (!res) {\n        let calculated = await vote(\n          info.params,\n          info.method,\n          hash\n        );\n        if (calculated.result) {\n          const result = {\n            info_uid: info.uid,\n            info_hash: hash,\n            data: calculated.result,\n          };\n          setResult(JSON.stringify(result, null, 2));\n\t\t  await postResult(result);\n        }\n\t  } else {\n\t\tsetResult(JSON.stringify(res, null, 2));\n\t  }\n    };\n\n    checkResult();\n  }, []);\n\n  return <pre>{result}</pre>;\n};\n\nexport default VotingResults;\n","import { IVoteInfo } from \"./database\";\nimport { User } from \"./user\";\nimport VotingForms from \"./VotingForms\";\nimport VotingResults from \"./VotingResults\";\n\ninterface VotingInfoProp {\n  info: IVoteInfo;\n  user: User;\n  hash: string;\n}\n\nconst VotingInfo = ({ info, user, hash }: VotingInfoProp) => {\n  const icon = info.method === \"liquid\" ? \"🌊\" : \"💠\";\n\n  const getOptions = (): { [to: string]: number } => {\n    let options: { [to: string]: number } = {};\n\n    if (info.method == \"liquid\") {\n      let delegates = Object.keys(info.params.voters);\n      let combined = delegates.concat(\n        Object.values(info.params.voters)\n          .map((v) => Object.keys(v))\n          .flat()\n      );\n\n      const unique = Array.from(new Set(combined)).filter(\n        (d) => d !== user.name\n      );\n      unique.forEach((d) => (options[d] = 0.0));\n    } else {\n      const policiesDup = Object.values(info.params.voters)\n        .map((v) => Object.keys(v))\n        .flat();\n      const policies = Array.from(new Set(policiesDup));\n      policies.forEach((p) => (options[p] = 0.0));\n    }\n\n    // fill in the current value\n    const userVotes = info.params.voters[user.name];\n    if (userVotes) {\n      Object.keys(userVotes).forEach((to) => (options[to] = userVotes[to]));\n    }\n\n    return options;\n  };\n\n  return (\n    <div>\n      <p>\n        logged in as: {user.name}({user.uid})\n      </p>\n      <a href=\"./\">back to list</a>\n      <h1>{info.title}</h1>\n      <p>{info.description}</p>\n      <p>{info.parent || \"\"}</p>\n      <p>{icon}</p>\n      <VotingForms votes={getOptions()} user={user} uid={info.uid} />\n      <VotingResults info={info} hash={hash} />\n    </div>\n  );\n};\n\nexport default VotingInfo;\n","import { useEffect, useState } from \"react\";\nimport VotingInfo from \"./VotingInfo\";\nimport { fetchInfo, fetchTag, IVoteInfo } from \"./database\";\nimport {User} from \"./user\";\n\ninterface VotingSessionProps{\n\tuid:string,\n\tuser:User,\n}\n\nconst VotingSession = ({uid, user}:VotingSessionProps) => {\n\tconst [info, setInfo] = useState<null|IVoteInfo>(null);\n\tconst [hash, setHash] = useState(\"\");\n\n\tuseEffect(()=>{\n\t\tconst getInfo = async () => {\n\t\t\tlet latestHash = await fetchTag(uid);\n\t\t\tlet latestInfo: IVoteInfo = await fetchInfo(latestHash);\n\t\t\tsetHash(latestHash);\n\t\t\tsetInfo(latestInfo);\n\n\t\t};\n\t\tgetInfo();\n\t},[])\n\n\tif(info){\n\t\treturn <VotingInfo info={info} user={user} hash={hash}/>\n\t} else {\n\t\treturn <div>loading voting information...</div>\n\t}\n\n};\n\nexport default VotingSession;\n","import { User } from \"./user\";\nimport MakeNewUser from \"./MakeNewUser\";\nimport \"./App.css\";\nimport ListView from \"./ListView\";\nimport VotingSession from \"./VotingSession\";\nimport { useEffect, useState } from \"react\";\n\nconst App = () => {\n  const [user, setUser] = useState<null | User>(null);\n\n  useEffect(() => {\n    let savedUser = checkSavedUser();\n    setUser(savedUser);\n  }, []);\n\n  // first make sure we have a user\n  if (!user) {\n    return <MakeNewUser />;\n  }\n\n  const topicId = checkParams(\"t\");\n\n  if (!topicId) {\n    return <ListView user={user} />;\n  }\n\n  return <VotingSession uid={topicId} user={user} />;\n};\n\nconst checkParams = (p: string): string | null => {\n  let cUrl = window.location.search;\n  const params = new URLSearchParams(cUrl);\n  return params.get(p);\n};\n\nconst checkSavedUser = (): null | User => {\n  const userData = localStorage.getItem(\"user\");\n  if (userData) {\n    const user: User = JSON.parse(userData);\n    return user;\n  } else {\n    return null;\n  }\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}